<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Second Brain</title>
    <link>https://nhula01.github.io/secondbrain.github.io/posts/</link>
    <description>Recent content in Posts on Second Brain</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Feb 2024 16:06:34 -0700</lastBuildDate>
    <atom:link href="https://nhula01.github.io/secondbrain.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://nhula01.github.io/secondbrain.github.io/posts/mypost/</link>
      <pubDate>Sat, 24 Feb 2024 16:06:34 -0700</pubDate>
      <guid>https://nhula01.github.io/secondbrain.github.io/posts/mypost/</guid>
      <description>Here is my little brain where I saved everything that I have learned!</description>
    </item>
    <item>
      <title>Deutsch&#39;s Problem</title>
      <link>https://nhula01.github.io/secondbrain.github.io/posts/deutsch_problem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://nhula01.github.io/secondbrain.github.io/posts/deutsch_problem/</guid>
      <description>Look at Query Gate
\documentclass{article} \begin{document} Hello, LaTeX! $n \in x$ \end{document} \section{Introduction} This is LaTeX content directly within Org mode. You can write your LaTeX code here.
\begin{equation} E = mc^2 \end{equation}
Learn about the query here: Deustch&amp;rsquo;s algorithm solves the parity problem for \(n=1\).
Deutsch&amp;rsquo;s problem:
Input: a function \( f:\{0,1\} \to \{0,1\} \)
Output: 0 if f is constant, 1 if f is balanced
The quantum circuit looks like this :</description>
    </item>
    <item>
      <title>Query Gate</title>
      <link>https://nhula01.github.io/secondbrain.github.io/posts/query_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://nhula01.github.io/secondbrain.github.io/posts/query_model/</guid>
      <description>The computational model is usually built as
input -&amp;gt; computation -&amp;gt; output
For query model, the input is not provided to the computation. The input is a function that the computation acceses by making queries. (random access to the input)
input
computation &amp;mdash;&amp;gt; output
Since the input is hidden (oracle/blackbox), only by asking the information of the input could be revealed.
For a funcion \(f: \sum^n-&amp;gt; \sum^m\). When the query \(x\in \sum^n\) is made by a computation, a value \(f(x) \in \sum^m\) is made available.</description>
    </item>
  </channel>
</rss>
